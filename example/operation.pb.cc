// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operation.proto

#include "operation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace operation {
PROTOBUF_CONSTEXPR AddRequest::AddRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nums1_)*/0
  , /*decltype(_impl_.nums2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRequestDefaultTypeInternal() {}
  union {
    AddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRequestDefaultTypeInternal _AddRequest_default_instance_;
PROTOBUF_CONSTEXPR ResultHead::ResultHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errormsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultHeadDefaultTypeInternal() {}
  union {
    ResultHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultHeadDefaultTypeInternal _ResultHead_default_instance_;
PROTOBUF_CONSTEXPR AddResponse::AddResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resulthead_)*/nullptr
  , /*decltype(_impl_.ans_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddResponseDefaultTypeInternal() {}
  union {
    AddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddResponseDefaultTypeInternal _AddResponse_default_instance_;
}  // namespace operation
static ::_pb::Metadata file_level_metadata_operation_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_operation_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_operation_2eproto[1];

const uint32_t TableStruct_operation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operation::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operation::AddRequest, _impl_.nums1_),
  PROTOBUF_FIELD_OFFSET(::operation::AddRequest, _impl_.nums2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operation::ResultHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operation::ResultHead, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::operation::ResultHead, _impl_.errormsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::operation::AddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::operation::AddResponse, _impl_.resulthead_),
  PROTOBUF_FIELD_OFFSET(::operation::AddResponse, _impl_.ans_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::operation::AddRequest)},
  { 8, -1, -1, sizeof(::operation::ResultHead)},
  { 16, -1, -1, sizeof(::operation::AddResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::operation::_AddRequest_default_instance_._instance,
  &::operation::_ResultHead_default_instance_._instance,
  &::operation::_AddResponse_default_instance_._instance,
};

const char descriptor_table_protodef_operation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017operation.proto\022\toperation\"*\n\nAddReque"
  "st\022\r\n\005nums1\030\001 \001(\005\022\r\n\005nums2\030\002 \001(\005\"-\n\nResu"
  "ltHead\022\r\n\005error\030\001 \001(\005\022\020\n\010errorMsg\030\002 \001(\t\""
  "E\n\013AddResponse\022)\n\nresultHead\030\001 \001(\0132\025.ope"
  "ration.ResultHead\022\013\n\003ans\030\002 \001(\0032A\n\tOperat"
  "ion\0224\n\003Add\022\025.operation.AddRequest\032\026.oper"
  "ation.AddResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_operation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_operation_2eproto = {
    false, false, 270, descriptor_table_protodef_operation_2eproto,
    "operation.proto",
    &descriptor_table_operation_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_operation_2eproto::offsets,
    file_level_metadata_operation_2eproto, file_level_enum_descriptors_operation_2eproto,
    file_level_service_descriptors_operation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_operation_2eproto_getter() {
  return &descriptor_table_operation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_operation_2eproto(&descriptor_table_operation_2eproto);
namespace operation {

// ===================================================================

class AddRequest::_Internal {
 public:
};

AddRequest::AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operation.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.nums1_){}
    , decltype(_impl_.nums2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.nums1_, &from._impl_.nums1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nums2_) -
    reinterpret_cast<char*>(&_impl_.nums1_)) + sizeof(_impl_.nums2_));
  // @@protoc_insertion_point(copy_constructor:operation.AddRequest)
}

inline void AddRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nums1_){0}
    , decltype(_impl_.nums2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:operation.AddRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:operation.AddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.nums1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nums2_) -
      reinterpret_cast<char*>(&_impl_.nums1_)) + sizeof(_impl_.nums2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nums1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nums1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nums2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nums2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operation.AddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nums1 = 1;
  if (this->_internal_nums1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nums1(), target);
  }

  // int32 nums2 = 2;
  if (this->_internal_nums2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nums2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operation.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operation.AddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 nums1 = 1;
  if (this->_internal_nums1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nums1());
  }

  // int32 nums2 = 2;
  if (this->_internal_nums2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nums2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRequest::GetClassData() const { return &_class_data_; }

void AddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddRequest *>(to)->MergeFrom(
      static_cast<const AddRequest &>(from));
}


void AddRequest::MergeFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operation.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_nums1() != 0) {
    _internal_set_nums1(from._internal_nums1());
  }
  if (from._internal_nums2() != 0) {
    _internal_set_nums2(from._internal_nums2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operation.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRequest, _impl_.nums2_)
      + sizeof(AddRequest::_impl_.nums2_)
      - PROTOBUF_FIELD_OFFSET(AddRequest, _impl_.nums1_)>(
          reinterpret_cast<char*>(&_impl_.nums1_),
          reinterpret_cast<char*>(&other->_impl_.nums1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operation_2eproto_getter, &descriptor_table_operation_2eproto_once,
      file_level_metadata_operation_2eproto[0]);
}

// ===================================================================

class ResultHead::_Internal {
 public:
};

ResultHead::ResultHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operation.ResultHead)
}
ResultHead::ResultHead(const ResultHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.errormsg_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errormsg().empty()) {
    _impl_.errormsg_.Set(from._internal_errormsg(), 
      GetArenaForAllocation());
  }
  _impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:operation.ResultHead)
}

inline void ResultHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errormsg_){}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.errormsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResultHead::~ResultHead() {
  // @@protoc_insertion_point(destructor:operation.ResultHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errormsg_.Destroy();
}

void ResultHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultHead::Clear() {
// @@protoc_insertion_point(message_clear_start:operation.ResultHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errormsg_.ClearToEmpty();
  _impl_.error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errorMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errormsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "operation.ResultHead.errorMsg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operation.ResultHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // string errorMsg = 2;
  if (!this->_internal_errormsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormsg().data(), static_cast<int>(this->_internal_errormsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "operation.ResultHead.errorMsg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errormsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operation.ResultHead)
  return target;
}

size_t ResultHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operation.ResultHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMsg = 2;
  if (!this->_internal_errormsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormsg());
  }

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultHead::GetClassData() const { return &_class_data_; }

void ResultHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResultHead *>(to)->MergeFrom(
      static_cast<const ResultHead &>(from));
}


void ResultHead::MergeFrom(const ResultHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operation.ResultHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_errormsg().empty()) {
    _internal_set_errormsg(from._internal_errormsg());
  }
  if (from._internal_error() != 0) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultHead::CopyFrom(const ResultHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operation.ResultHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultHead::IsInitialized() const {
  return true;
}

void ResultHead::InternalSwap(ResultHead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errormsg_, lhs_arena,
      &other->_impl_.errormsg_, rhs_arena
  );
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operation_2eproto_getter, &descriptor_table_operation_2eproto_once,
      file_level_metadata_operation_2eproto[1]);
}

// ===================================================================

class AddResponse::_Internal {
 public:
  static const ::operation::ResultHead& resulthead(const AddResponse* msg);
};

const ::operation::ResultHead&
AddResponse::_Internal::resulthead(const AddResponse* msg) {
  return *msg->_impl_.resulthead_;
}
AddResponse::AddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:operation.AddResponse)
}
AddResponse::AddResponse(const AddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.resulthead_){nullptr}
    , decltype(_impl_.ans_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resulthead()) {
    _impl_.resulthead_ = new ::operation::ResultHead(*from._impl_.resulthead_);
  }
  _impl_.ans_ = from._impl_.ans_;
  // @@protoc_insertion_point(copy_constructor:operation.AddResponse)
}

inline void AddResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resulthead_){nullptr}
    , decltype(_impl_.ans_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddResponse::~AddResponse() {
  // @@protoc_insertion_point(destructor:operation.AddResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.resulthead_;
}

void AddResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:operation.AddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.resulthead_ != nullptr) {
    delete _impl_.resulthead_;
  }
  _impl_.resulthead_ = nullptr;
  _impl_.ans_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .operation.ResultHead resultHead = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_resulthead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ans = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:operation.AddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .operation.ResultHead resultHead = 1;
  if (this->_internal_has_resulthead()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::resulthead(this),
        _Internal::resulthead(this).GetCachedSize(), target, stream);
  }

  // int64 ans = 2;
  if (this->_internal_ans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:operation.AddResponse)
  return target;
}

size_t AddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:operation.AddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .operation.ResultHead resultHead = 1;
  if (this->_internal_has_resulthead()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resulthead_);
  }

  // int64 ans = 2;
  if (this->_internal_ans() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ans());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddResponse::GetClassData() const { return &_class_data_; }

void AddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddResponse *>(to)->MergeFrom(
      static_cast<const AddResponse &>(from));
}


void AddResponse::MergeFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:operation.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_resulthead()) {
    _internal_mutable_resulthead()->::operation::ResultHead::MergeFrom(from._internal_resulthead());
  }
  if (from._internal_ans() != 0) {
    _internal_set_ans(from._internal_ans());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddResponse::CopyFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:operation.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  return true;
}

void AddResponse::InternalSwap(AddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddResponse, _impl_.ans_)
      + sizeof(AddResponse::_impl_.ans_)
      - PROTOBUF_FIELD_OFFSET(AddResponse, _impl_.resulthead_)>(
          reinterpret_cast<char*>(&_impl_.resulthead_),
          reinterpret_cast<char*>(&other->_impl_.resulthead_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_operation_2eproto_getter, &descriptor_table_operation_2eproto_once,
      file_level_metadata_operation_2eproto[2]);
}

// ===================================================================

Operation::~Operation() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Operation::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_operation_2eproto);
  return file_level_service_descriptors_operation_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Operation::GetDescriptor() {
  return descriptor();
}

void Operation::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::operation::AddRequest*,
                         ::operation::AddResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void Operation::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_operation_2eproto[0]);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::operation::AddRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::operation::AddResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Operation::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::operation::AddRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Operation::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::operation::AddResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Operation_Stub::Operation_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Operation_Stub::Operation_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Operation_Stub::~Operation_Stub() {
  if (owns_channel_) delete channel_;
}

void Operation_Stub::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::operation::AddRequest* request,
                              ::operation::AddResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace operation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::operation::AddRequest*
Arena::CreateMaybeMessage< ::operation::AddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operation::AddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::operation::ResultHead*
Arena::CreateMaybeMessage< ::operation::ResultHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operation::ResultHead >(arena);
}
template<> PROTOBUF_NOINLINE ::operation::AddResponse*
Arena::CreateMaybeMessage< ::operation::AddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::operation::AddResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
