// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_operation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_operation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_operation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_operation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_operation_2eproto;
namespace operation {
class AddRequest;
struct AddRequestDefaultTypeInternal;
extern AddRequestDefaultTypeInternal _AddRequest_default_instance_;
class AddResponse;
struct AddResponseDefaultTypeInternal;
extern AddResponseDefaultTypeInternal _AddResponse_default_instance_;
class ResultHead;
struct ResultHeadDefaultTypeInternal;
extern ResultHeadDefaultTypeInternal _ResultHead_default_instance_;
}  // namespace operation
PROTOBUF_NAMESPACE_OPEN
template<> ::operation::AddRequest* Arena::CreateMaybeMessage<::operation::AddRequest>(Arena*);
template<> ::operation::AddResponse* Arena::CreateMaybeMessage<::operation::AddResponse>(Arena*);
template<> ::operation::ResultHead* Arena::CreateMaybeMessage<::operation::ResultHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operation {

// ===================================================================

class AddRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operation.AddRequest) */ {
 public:
  inline AddRequest() : AddRequest(nullptr) {}
  ~AddRequest() override;
  explicit PROTOBUF_CONSTEXPR AddRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddRequest(const AddRequest& from);
  AddRequest(AddRequest&& from) noexcept
    : AddRequest() {
    *this = ::std::move(from);
  }

  inline AddRequest& operator=(const AddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequest& operator=(AddRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddRequest* internal_default_instance() {
    return reinterpret_cast<const AddRequest*>(
               &_AddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddRequest& a, AddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operation.AddRequest";
  }
  protected:
  explicit AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNums1FieldNumber = 1,
    kNums2FieldNumber = 2,
  };
  // int32 nums1 = 1;
  void clear_nums1();
  int32_t nums1() const;
  void set_nums1(int32_t value);
  private:
  int32_t _internal_nums1() const;
  void _internal_set_nums1(int32_t value);
  public:

  // int32 nums2 = 2;
  void clear_nums2();
  int32_t nums2() const;
  void set_nums2(int32_t value);
  private:
  int32_t _internal_nums2() const;
  void _internal_set_nums2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operation.AddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t nums1_;
    int32_t nums2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operation_2eproto;
};
// -------------------------------------------------------------------

class ResultHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operation.ResultHead) */ {
 public:
  inline ResultHead() : ResultHead(nullptr) {}
  ~ResultHead() override;
  explicit PROTOBUF_CONSTEXPR ResultHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultHead(const ResultHead& from);
  ResultHead(ResultHead&& from) noexcept
    : ResultHead() {
    *this = ::std::move(from);
  }

  inline ResultHead& operator=(const ResultHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultHead& operator=(ResultHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultHead* internal_default_instance() {
    return reinterpret_cast<const ResultHead*>(
               &_ResultHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultHead& a, ResultHead& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operation.ResultHead";
  }
  protected:
  explicit ResultHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string errorMsg = 2;
  void clear_errormsg();
  const std::string& errormsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormsg();
  PROTOBUF_NODISCARD std::string* release_errormsg();
  void set_allocated_errormsg(std::string* errormsg);
  private:
  const std::string& _internal_errormsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormsg(const std::string& value);
  std::string* _internal_mutable_errormsg();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:operation.ResultHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormsg_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operation_2eproto;
};
// -------------------------------------------------------------------

class AddResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operation.AddResponse) */ {
 public:
  inline AddResponse() : AddResponse(nullptr) {}
  ~AddResponse() override;
  explicit PROTOBUF_CONSTEXPR AddResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddResponse(const AddResponse& from);
  AddResponse(AddResponse&& from) noexcept
    : AddResponse() {
    *this = ::std::move(from);
  }

  inline AddResponse& operator=(const AddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResponse& operator=(AddResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddResponse* internal_default_instance() {
    return reinterpret_cast<const AddResponse*>(
               &_AddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddResponse& a, AddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operation.AddResponse";
  }
  protected:
  explicit AddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultHeadFieldNumber = 1,
    kAnsFieldNumber = 2,
  };
  // .operation.ResultHead resultHead = 1;
  bool has_resulthead() const;
  private:
  bool _internal_has_resulthead() const;
  public:
  void clear_resulthead();
  const ::operation::ResultHead& resulthead() const;
  PROTOBUF_NODISCARD ::operation::ResultHead* release_resulthead();
  ::operation::ResultHead* mutable_resulthead();
  void set_allocated_resulthead(::operation::ResultHead* resulthead);
  private:
  const ::operation::ResultHead& _internal_resulthead() const;
  ::operation::ResultHead* _internal_mutable_resulthead();
  public:
  void unsafe_arena_set_allocated_resulthead(
      ::operation::ResultHead* resulthead);
  ::operation::ResultHead* unsafe_arena_release_resulthead();

  // int64 ans = 2;
  void clear_ans();
  int64_t ans() const;
  void set_ans(int64_t value);
  private:
  int64_t _internal_ans() const;
  void _internal_set_ans(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operation.AddResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::operation::ResultHead* resulthead_;
    int64_t ans_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_operation_2eproto;
};
// ===================================================================

class Operation_Stub;

class Operation : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Operation() {};
 public:
  virtual ~Operation();

  typedef Operation_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::operation::AddRequest* request,
                       ::operation::AddResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Operation);
};

class Operation_Stub : public Operation {
 public:
  Operation_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Operation_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Operation_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Operation ------------------------------------------

  void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::operation::AddRequest* request,
                       ::operation::AddResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Operation_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddRequest

// int32 nums1 = 1;
inline void AddRequest::clear_nums1() {
  _impl_.nums1_ = 0;
}
inline int32_t AddRequest::_internal_nums1() const {
  return _impl_.nums1_;
}
inline int32_t AddRequest::nums1() const {
  // @@protoc_insertion_point(field_get:operation.AddRequest.nums1)
  return _internal_nums1();
}
inline void AddRequest::_internal_set_nums1(int32_t value) {
  
  _impl_.nums1_ = value;
}
inline void AddRequest::set_nums1(int32_t value) {
  _internal_set_nums1(value);
  // @@protoc_insertion_point(field_set:operation.AddRequest.nums1)
}

// int32 nums2 = 2;
inline void AddRequest::clear_nums2() {
  _impl_.nums2_ = 0;
}
inline int32_t AddRequest::_internal_nums2() const {
  return _impl_.nums2_;
}
inline int32_t AddRequest::nums2() const {
  // @@protoc_insertion_point(field_get:operation.AddRequest.nums2)
  return _internal_nums2();
}
inline void AddRequest::_internal_set_nums2(int32_t value) {
  
  _impl_.nums2_ = value;
}
inline void AddRequest::set_nums2(int32_t value) {
  _internal_set_nums2(value);
  // @@protoc_insertion_point(field_set:operation.AddRequest.nums2)
}

// -------------------------------------------------------------------

// ResultHead

// int32 error = 1;
inline void ResultHead::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t ResultHead::_internal_error() const {
  return _impl_.error_;
}
inline int32_t ResultHead::error() const {
  // @@protoc_insertion_point(field_get:operation.ResultHead.error)
  return _internal_error();
}
inline void ResultHead::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void ResultHead::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:operation.ResultHead.error)
}

// string errorMsg = 2;
inline void ResultHead::clear_errormsg() {
  _impl_.errormsg_.ClearToEmpty();
}
inline const std::string& ResultHead::errormsg() const {
  // @@protoc_insertion_point(field_get:operation.ResultHead.errorMsg)
  return _internal_errormsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultHead::set_errormsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operation.ResultHead.errorMsg)
}
inline std::string* ResultHead::mutable_errormsg() {
  std::string* _s = _internal_mutable_errormsg();
  // @@protoc_insertion_point(field_mutable:operation.ResultHead.errorMsg)
  return _s;
}
inline const std::string& ResultHead::_internal_errormsg() const {
  return _impl_.errormsg_.Get();
}
inline void ResultHead::_internal_set_errormsg(const std::string& value) {
  
  _impl_.errormsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultHead::_internal_mutable_errormsg() {
  
  return _impl_.errormsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultHead::release_errormsg() {
  // @@protoc_insertion_point(field_release:operation.ResultHead.errorMsg)
  return _impl_.errormsg_.Release();
}
inline void ResultHead::set_allocated_errormsg(std::string* errormsg) {
  if (errormsg != nullptr) {
    
  } else {
    
  }
  _impl_.errormsg_.SetAllocated(errormsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormsg_.IsDefault()) {
    _impl_.errormsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operation.ResultHead.errorMsg)
}

// -------------------------------------------------------------------

// AddResponse

// .operation.ResultHead resultHead = 1;
inline bool AddResponse::_internal_has_resulthead() const {
  return this != internal_default_instance() && _impl_.resulthead_ != nullptr;
}
inline bool AddResponse::has_resulthead() const {
  return _internal_has_resulthead();
}
inline void AddResponse::clear_resulthead() {
  if (GetArenaForAllocation() == nullptr && _impl_.resulthead_ != nullptr) {
    delete _impl_.resulthead_;
  }
  _impl_.resulthead_ = nullptr;
}
inline const ::operation::ResultHead& AddResponse::_internal_resulthead() const {
  const ::operation::ResultHead* p = _impl_.resulthead_;
  return p != nullptr ? *p : reinterpret_cast<const ::operation::ResultHead&>(
      ::operation::_ResultHead_default_instance_);
}
inline const ::operation::ResultHead& AddResponse::resulthead() const {
  // @@protoc_insertion_point(field_get:operation.AddResponse.resultHead)
  return _internal_resulthead();
}
inline void AddResponse::unsafe_arena_set_allocated_resulthead(
    ::operation::ResultHead* resulthead) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resulthead_);
  }
  _impl_.resulthead_ = resulthead;
  if (resulthead) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operation.AddResponse.resultHead)
}
inline ::operation::ResultHead* AddResponse::release_resulthead() {
  
  ::operation::ResultHead* temp = _impl_.resulthead_;
  _impl_.resulthead_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operation::ResultHead* AddResponse::unsafe_arena_release_resulthead() {
  // @@protoc_insertion_point(field_release:operation.AddResponse.resultHead)
  
  ::operation::ResultHead* temp = _impl_.resulthead_;
  _impl_.resulthead_ = nullptr;
  return temp;
}
inline ::operation::ResultHead* AddResponse::_internal_mutable_resulthead() {
  
  if (_impl_.resulthead_ == nullptr) {
    auto* p = CreateMaybeMessage<::operation::ResultHead>(GetArenaForAllocation());
    _impl_.resulthead_ = p;
  }
  return _impl_.resulthead_;
}
inline ::operation::ResultHead* AddResponse::mutable_resulthead() {
  ::operation::ResultHead* _msg = _internal_mutable_resulthead();
  // @@protoc_insertion_point(field_mutable:operation.AddResponse.resultHead)
  return _msg;
}
inline void AddResponse::set_allocated_resulthead(::operation::ResultHead* resulthead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resulthead_;
  }
  if (resulthead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resulthead);
    if (message_arena != submessage_arena) {
      resulthead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resulthead, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resulthead_ = resulthead;
  // @@protoc_insertion_point(field_set_allocated:operation.AddResponse.resultHead)
}

// int64 ans = 2;
inline void AddResponse::clear_ans() {
  _impl_.ans_ = int64_t{0};
}
inline int64_t AddResponse::_internal_ans() const {
  return _impl_.ans_;
}
inline int64_t AddResponse::ans() const {
  // @@protoc_insertion_point(field_get:operation.AddResponse.ans)
  return _internal_ans();
}
inline void AddResponse::_internal_set_ans(int64_t value) {
  
  _impl_.ans_ = value;
}
inline void AddResponse::set_ans(int64_t value) {
  _internal_set_ans(value);
  // @@protoc_insertion_point(field_set:operation.AddResponse.ans)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operation

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_operation_2eproto
